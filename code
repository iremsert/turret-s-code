#include <Servo.h>

Servo recoil_servo;
Servo pan_servo;
Servo tilt_servo;

const byte pan_limit_1 = 0;
const byte pan_limit_2 = 180;
const byte tilt_limit_1 = 65;
const byte tilt_limit_2 = 180;
const byte recoil_rest = 180;    
const byte recoil_pushed = 125;  

byte byte_from_app;
const byte buffSize = 30;
byte inputBuffer[buffSize];
const byte startMarker = 255;
const byte endMarker = 254;
byte bytesRecvd = 0;
boolean data_received = false;

bool is_firing =  false;
bool can_fire =  false;
bool recoiling = false;

unsigned long firing_start_time = 0;
unsigned long firing_current_time = 0;
const long firing_time = 150;

unsigned long recoil_start_time = 0;
unsigned long recoil_current_time = 0;
const long recoil_time = 2 * firing_time;

const byte motor_pin =  12;
boolean motors_ON = false;


void setup()
{
  pinMode(motor_pin, OUTPUT);
  digitalWrite(motor_pin, LOW);

  //-----attaches servo to pins
  recoil_servo.attach(9);
  pan_servo.attach(10);
  tilt_servo.attach(11);

  recoil_servo.write(recoil_rest);
  pan_servo.write(90);
  delay(1000);
  tilt_servo.write(105);


  Serial.begin(9600);  
}


void loop()
{
  getDataFromPC();
  set_motor();
  if (data_received) {
    move_servo();
    set_recoil();
    set_motor();
  }
  fire();
}


void getDataFromPC() {


  if (Serial.available()) {  

    byte_from_app = Serial.read(); 

    if (byte_from_app == 255) {     
      bytesRecvd = 0;                   
      data_received = false;
    }

    else if (byte_from_app == 254) {    
      data_received = true;               
    }

    else {                           
      inputBuffer[bytesRecvd] = byte_from_app;     
      bytesRecvd++;                               
      if (bytesRecvd == buffSize) {    
        bytesRecvd = buffSize - 1;    
      }
    }
  }
}

void move_servo() {
  
  byte pan_servo_position = map(inputBuffer[0], 0, 253, pan_limit_2, pan_limit_1);
  pan_servo.write(pan_servo_position); 
  byte tilt_servo_position = map(inputBuffer[1], 0 , 253, tilt_limit_2, tilt_limit_1); 
  tilt_servo.write(tilt_servo_position);
}


void set_recoil() {

  if (inputBuffer[3] == 1) {        
    if (!is_firing && !recoiling) { 
      can_fire = true;              
    }
  }
  else {                  
    can_fire = false;     
  }
}


void set_motor() {

  if (inputBuffer[2] == 1) {                
    digitalWrite(motor_pin, HIGH);          
    motors_ON = true;
  }
  else {                                   
    digitalWrite(motor_pin, LOW);          
    motors_ON = false;

  }
}



void fire() { 

  if (can_fire && !is_firing && motors_ON) {
    //if (can_fire && !is_firing) {
    firing_start_time = millis();
    recoil_start_time = millis();
    is_firing = true;
  }

  firing_current_time = millis();
  recoil_current_time = millis();

  if (is_firing && firing_current_time - firing_start_time < firing_time) {
    recoil_servo.write(recoil_pushed);
  }
  else if (is_firing && recoil_current_time - recoil_start_time < recoil_time) {
    recoil_servo.write(recoil_rest);
  }
  else if (is_firing && recoil_current_time - recoil_start_time > recoil_time) {
    is_firing = false;
  }

}
